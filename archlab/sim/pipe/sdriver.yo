                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f41004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f66803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f73803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x03e: 759e01000000000000   | 	jge Loop8
0x047: c0f20400000000000000 | 	iaddq $4, %rdx
0x051: 75bf00000000000000   | 	jge Loop4
0x05a: c0f20400000000000000 | 	iaddq $4, %rdx
0x064: 766e00000000000000   | 	jg Loop
0x06d: 90                   | 	ret
                            | 	
                            | 
0x06e:                      | Loop:	
0x06e: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x078: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x082: 62aa                 | 	andq %r10, %r10        # val <= 0?
0x084: 719700000000000000   | 	jle Npos
0x08d: c0f00100000000000000 | 	iaddq $1, %rax
0x097: 40a60000000000000000 | Npos:	rmmovq %r10, (%rsi)	# ...and store it to dst
0x0a1: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x0ab: c0f2ffffffffffffffff | 	iaddq $-1, %rdx	# len--
                            | 	
0x0b5: 766e00000000000000   | 	jg Loop			# if so, goto Loop:
0x0be: 90                   | 	ret
                            | 
                            | 	
0x0bf:                      | Loop4:
0x0bf: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x0c9: 50b70800000000000000 | 	mrmovq 8(%rdi),%r11
0x0d3: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x0dd: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0df: 71f200000000000000   | 	jle Npos1		# if so, goto Npos:
0x0e8: c0f00100000000000000 | 	iaddq $1,%rax
0x0f2:                      | Npos1:
0x0f2: 40b60800000000000000 | 	rmmovq %r11,8(%rsi)
0x0fc: 62bb                 | 	andq %r11,%r11
0x0fe: 711101000000000000   | 	jle Npos2
0x107: c0f00100000000000000 | 	iaddq $1,%rax
0x111:                      | Npos2:
0x111: 50a71000000000000000 | 	mrmovq 16(%rdi),%r10
0x11b: 50b71800000000000000 | 	mrmovq 24(%rdi),%r11
0x125: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x12f: 62aa                 | 	andq %r10,%r10
0x131: 714401000000000000   | 	jle Npos3
0x13a: c0f00100000000000000 | 	iaddq $1,%rax
0x144:                      | Npos3:
0x144: 40b61800000000000000 | 	rmmovq %r11,24(%rsi)
0x14e: 62bb                 | 	andq %r11,%r11
0x150: 716301000000000000   | 	jle end4
0x159: c0f00100000000000000 | 	iaddq $1,%rax
0x163:                      | end4:
0x163: c0f72000000000000000 | 	iaddq $32,%rdi
0x16d: c0f62000000000000000 | 	iaddq $32,%rsi
0x177: c0f2fcffffffffffffff | 	iaddq $-4,%rdx
0x181: 756e00000000000000   | 	jge Loop
0x18a: c0f20400000000000000 | 	iaddq $4, %rdx
0x194: 766e00000000000000   | 	jg Loop
0x19d: 90                   | 	ret
                            | 	
0x19e:                      | Loop8:
0x19e: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x1a8: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11
0x1b2: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x1bc: 62aa                 | 	andq %r10, %r10        # val <= 0?
0x1be: 71d101000000000000   | 	jle Npos4
0x1c7: c0f00100000000000000 | 	iaddq $1, %rax
                            | 	
                            | 	
0x1d1: 40b60800000000000000 | Npos4:	rmmovq %r11, 8(%rsi)	# read val from src...
0x1db: 62bb                 | 	andq %r11, %r11        # val <= 0?
0x1dd: 71f001000000000000   | 	jle Npos5
0x1e6: c0f00100000000000000 | 	iaddq $1, %rax
                            | 	
0x1f0: 50a71000000000000000 | Npos5:	mrmovq 16(%rdi), %r10	# read val from src...
0x1fa: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x204: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x20e: 62aa                 | 	andq %r10, %r10        # val <= 0?
0x210: 712302000000000000   | 	jle Npos6
0x219: c0f00100000000000000 | 	iaddq $1, %rax
                            | 	
                            | 	
0x223: 40b61800000000000000 | Npos6:	rmmovq %r11, 24(%rsi)	# read val from src...
0x22d: 62bb                 | 	andq %r11, %r11        # val <= 0?
0x22f: 714202000000000000   | 	jle Npos7
0x238: c0f00100000000000000 | 	iaddq $1, %rax
                            | 	
                            | 	
0x242: 50a72000000000000000 | Npos7:	mrmovq 32(%rdi), %r10	# read val from src...
0x24c: 50b72800000000000000 | 	mrmovq 40(%rdi), %r11
0x256: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)
0x260: 62aa                 | 	andq %r10, %r10        # val <= 0?
0x262: 717502000000000000   | 	jle Npos8
0x26b: c0f00100000000000000 | 	iaddq $1, %rax
                            | 	
                            | 	
0x275: 40b62800000000000000 | Npos8:	rmmovq %r11, 40(%rsi)	# read val from src...
0x27f: 62bb                 | 	andq %r11, %r11        # val <= 0?
0x281: 719402000000000000   | 	jle Npos9
0x28a: c0f00100000000000000 | 	iaddq $1, %rax
                            | 	
0x294: 50a73000000000000000 | Npos9:	mrmovq 48(%rdi), %r10	# read val from src...
0x29e: 50b73800000000000000 | 	mrmovq 56(%rdi), %r11
0x2a8: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)
0x2b2: 62aa                 | 	andq %r10, %r10        # val <= 0?
0x2b4: 71c702000000000000   | 	jle Npos10
0x2bd: c0f00100000000000000 | 	iaddq $1, %rax
                            | 	
                            | 	
0x2c7:                      | Npos10:	
0x2c7: 40b63800000000000000 | 	rmmovq %r11, 56(%rsi)	# read val from src...
0x2d1: 62bb                 | 	andq %r11, %r11        # val <= 0?
0x2d3: 71e602000000000000   | 	jle end8
0x2dc: c0f00100000000000000 | 	iaddq $1, %rax
                            | 	
0x2e6: c0f74000000000000000 | end8:	iaddq $64, %rdi
0x2f0: c0f64000000000000000 | 	iaddq $64, %rsi
0x2fa: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx	# len--
                            | 	
0x304: 759e01000000000000   | 	jge Loop8		# if so, goto Loop:
0x30d: c0f20400000000000000 | 	iaddq $4, %rdx
0x317: 75bf00000000000000   | 	jge Loop4
0x320: c0f20400000000000000 | 	iaddq $4, %rdx
0x32a: 766e00000000000000   | 	jg Loop
                            | 
                            | 
                            | 
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x333:                      | Done:
0x333: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x334:                      | End:
                            | #/* $end ncopy-ys */
0x334:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x338:                      | 	.align 8
0x338:                      | src:
0x338: 0100000000000000     | 	.quad 1
0x340: 0200000000000000     | 	.quad 2
0x348: fdffffffffffffff     | 	.quad -3
0x350: fcffffffffffffff     | 	.quad -4
0x358: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x360:                      | 	.align 16
0x360:                      | Predest:
0x360: fadebc0000000000     | 	.quad 0xbcdefa
0x368:                      | dest:
0x368: abefcd0000000000     | 	.quad 0xcdefab
0x370: abefcd0000000000     | 	.quad 0xcdefab
0x378: abefcd0000000000     | 	.quad 0xcdefab
0x380: abefcd0000000000     | 	.quad 0xcdefab
0x388:                      | Postdest:
0x388: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x390:                      | .align 8
                            | # Run time stack
0x390: 0000000000000000     | 	.quad 0
0x398: 0000000000000000     | 	.quad 0
0x3a0: 0000000000000000     | 	.quad 0
0x3a8: 0000000000000000     | 	.quad 0
0x3b0: 0000000000000000     | 	.quad 0
0x3b8: 0000000000000000     | 	.quad 0
0x3c0: 0000000000000000     | 	.quad 0
0x3c8: 0000000000000000     | 	.quad 0
0x3d0: 0000000000000000     | 	.quad 0
0x3d8: 0000000000000000     | 	.quad 0
0x3e0: 0000000000000000     | 	.quad 0
0x3e8: 0000000000000000     | 	.quad 0
0x3f0: 0000000000000000     | 	.quad 0
0x3f8: 0000000000000000     | 	.quad 0
0x400: 0000000000000000     | 	.quad 0
0x408: 0000000000000000     | 	.quad 0
                            | 
0x410:                      | Stack:
