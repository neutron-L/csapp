#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	iaddq $-8, %rdx
	jge Loop8
	iaddq $4, %rdx
	jge Loop4
	iaddq $4, %rdx
	jg Loop
	ret
	

Loop:	
	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi		# src++
	andq %r10, %r10        # val <= 0?
	jle Npos
	iaddq $1, %rax
	
Npos:	rmmovq %r10, (%rsi)	# ...and store it to dst
	iaddq $8, %rsi		# dst++
	iaddq $-1, %rdx	# len--
	
	jg Loop			# if so, goto Loop:
	ret

	
Loop4:
	mrmovq (%rdi), %r10	# read val from src...
	mrmovq 8(%rdi),%r11
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos1		# if so, goto Npos:
	iaddq $1,%rax
Npos1:
	rmmovq %r11,8(%rsi)
	andq %r11,%r11
	jle Npos2
	iaddq $1,%rax
Npos2:
	mrmovq 16(%rdi),%r10
	mrmovq 24(%rdi),%r11
	rmmovq %r10, 16(%rsi)
	andq %r10,%r10
	jle Npos3
	iaddq $1,%rax
Npos3:
	rmmovq %r11,24(%rsi)
	andq %r11,%r11
	jle end4
	iaddq $1,%rax
end4:
	iaddq $32,%rdi
	iaddq $32,%rsi
	iaddq $-4,%rdx
	jge Loop
	iaddq $4, %rdx
	jg Loop
	ret
	
Loop8:
	mrmovq (%rdi), %r10	# read val from src...
	mrmovq 8(%rdi), %r11
	rmmovq %r10, (%rsi)
	andq %r10, %r10        # val <= 0?
	jle Npos4
	iaddq $1, %rax
	
	
Npos4:	rmmovq %r11, 8(%rsi)	# read val from src...
	andq %r11, %r11        # val <= 0?
	jle Npos5
	iaddq $1, %rax
	
Npos5:	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 24(%rdi), %r11
	rmmovq %r10, 16(%rsi)
	andq %r10, %r10        # val <= 0?
	jle Npos6
	iaddq $1, %rax
	
	
Npos6:	rmmovq %r11, 24(%rsi)	# read val from src...
	andq %r11, %r11        # val <= 0?
	jle Npos7
	iaddq $1, %rax
	
	
Npos7:	mrmovq 32(%rdi), %r10	# read val from src...
	mrmovq 40(%rdi), %r11
	rmmovq %r10, 32(%rsi)
	andq %r10, %r10        # val <= 0?
	jle Npos8
	iaddq $1, %rax
	
	
Npos8:	rmmovq %r11, 40(%rsi)	# read val from src...
	andq %r11, %r11        # val <= 0?
	jle Npos9
	iaddq $1, %rax
	
Npos9:	mrmovq 48(%rdi), %r10	# read val from src...
	mrmovq 56(%rdi), %r11
	rmmovq %r10, 48(%rsi)
	andq %r10, %r10        # val <= 0?
	jle Npos10
	iaddq $1, %rax
	
	
Npos10:	
	rmmovq %r11, 56(%rsi)	# read val from src...
	andq %r11, %r11        # val <= 0?
	jle end8
	iaddq $1, %rax
	
end8:	iaddq $64, %rdi
	iaddq $64, %rsi
	iaddq $-8, %rdx	# len--
	
	jge Loop8		# if so, goto Loop:
	iaddq $4, %rdx
	jge Loop4
	iaddq $4, %rdx
	jg Loop





##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
